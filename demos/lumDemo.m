function lumDemo
%% Calibrated Luminance Demo
%
% This demo shows how to use calibrated luminance to specify your stimuii. 
% 
% For this you need a so-called gamma calibration of your monitor. This requires
% a luminance measurement device. For an example, see the
% i1calibration experiment in the tools directory.
%
% In this demo we assume that we've estimated the relevant parameters of the 
% monitor's gamma functions. Luminances will only be approximately right for your
% screen, but they show the principles. 
% 
% The idea is that you program your stimuli by specifying the luminance of each 
% of the R G and B guns. In other words, where you would otherwise put RGB
% values between 0 and 1, you now put RGB values in cd/m2. The PTB imaging pipeline will take care
% of the conversion before these numbers are sent to the graphics card.
% 
% The colors you get by doing this are not calibrated (i.e. you won't know
% which color is generated by specifying [1 4 2], but you will know that
% the luminance is 1+4+2 =7 cd/m2 and that the green gun will generate 4 of
% these cd/m2 and the blue gun 2 cd/m2.
%
% BK - Feb 2017

import neurostim.*;
%% Setup CIC and the stimuli.
c = myRig;
c.screen.colorMode = 'LUM'; % Allow specification of RGB luminance as color
c.screen.colorCheck =true;  % This will invert colors that are impossible given this calibration. 
% The idea is that this will stand out, and you will catch that while
% debugging; not for production use. 
c.screen.color.text = [30 0 0];  % A red text 
c.screen.color.background = [30 30 30]; % A high luminance background that looks "white" (same luminance for each gun)


c.screen.type = 'GENERIC';
c.trialDuration = 1000;
c.iti           = 150;
c.paradigm      = 'lumDemo';
c.subjectNr      =  0;

% Provide the results of your calibration measurement here. Each monitor
% gun can be calibrated separately, or they can share a single calibration.
% Behind the scenes, PTB will apply the following conversion to each luminance value 
% that you specify:
% gunValue = bias + gain*((luminance-min)./(max-min))^(1/gamma)
%
% To determine thee parameters you measure the luminance for a range of
% gunvalues and then fit the above function (See utils.ptbcal() for an
% example).
%
% gamma = the gamma of the monitor. Something near 2 usually.
% bias = the lowest gun value. 
% gain = 1 
% min = the smallest luminance that the gun can generate. 0.
% max = the largest luminance that the gun can generate. 
c.screen.calibration.gamma =[2.1 2.0 2.0];     
c.screen.calibration.bias = [0.0061 0.0094 -0.0096];
c.screen.calibration.gain= 1;
c.screen.calibration.max = [30 30 30];
c.screen.calibration.min = 0;
% It is not yet possible to extract these numbers from a calibration file. 
%c.screen.calibration.calFile = '';
%c.dirs.calibration =''; % Current directory has the calibration file.


% Convpoly to create the target patch
ptch = stimuli.convPoly(c,'patch');
ptch.radius       = 5;
ptch.X            = 0;
ptch.Y            = 0;
ptch.nSides       = 10;
ptch.filled       = true;
ptch.color        = 0;
ptch.on           = 0;



%% Define conditions and blocks
lm =design('lum');
% In this block we want to vary the luminance of a grey patch across trials.
% Assigning a single luminance value is actually enough; PTB interprets a
% single color (x) as [x x x].
lum = (0.5:2:30);
lm.fac1.patch.color = lum; 
lmBlck=flow(c,'nrRepeats',1,'randomization','sequential');
lmBlck.addTrials(lm);

gr =design('greenred');
% In this block we ramp the luminance of the red gun up from 0.5 to 30, and
% the luminance of the green gun down from 30 to 0.5. So this should look
% like a patch that is first green and then turns more red over time.
gr.fac1.patch.color = num2cell([lum' fliplr(lum)' zeros(numel(lum),1)],2) ;
grBlck=flow(c,'nrRepeats',1,'randomization','sequential');
grBlck.addTrials(gr);


%% Run the demo
c.run(lmBlck,grBlck);
